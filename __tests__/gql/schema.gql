input TestObjectInput {
  name: String
}

interface Node {
  id: ID!
}

interface RelayConnection {
  pageInfo: PageInfo!
}

interface RelayEdge {
  cursor: String!
}

type Mutation {
  createTestObject(input: TestObjectInput!): TestObject
  deleteTestObject(id: ID!): Boolean
  optionallyMutateTestObject(id: ID!, input: TestObjectInput!): TestObject
  updateTestObject(id: ID!, input: TestObjectInput!): TestObject
}

type PageInfo {
  endCursor: String
  hasNextPage: Boolean
  hasPreviousPage: Boolean
  startCursor: String
}

type Query {
  testInterface: Node
  testInterfaceNonNull: Node!
  testObject(id: ID!): TestObject
  testObjectNonNull(id: ID!): TestObject!
  testObjects: [TestObject]
  testObjectsNonNull: [TestObject]!
  testObjectsNestedNonNull: [TestObject!]!
  testRelayConnection(
    first: Int
    last: Int
    before: String
    after: String
  ): TestRelayConnection
  testNonNullEdgesRelayConnection(
    first: Int
    last: Int
    before: String
    after: String
  ): TestNonNullEdgesRelayConnection
  testNonNullNodesRelayConnection(
    first: Int
    last: Int
    before: String
    after: String
  ): TestNonNullNodesRelayConnection
  testScalar: String
  testScalarNonNull: String!
  testScalarOptionalResolve: String
  testUnion: [TestUnion]
  testUnionNonNull: [TestUnion]!
  testUnionNestedNonNull: [TestUnion!]!
}

type TestCategory {
  id: ID!
  name: String!
}

type TestObject {
  id: ID!
  belongsToField: TestCategory
  belongsToNonNullField: TestCategory!
  hasManyField: [TestOption]
  hasManyNonNullField: [TestOption]!
  hasManyNestedNonNullField: [TestOption!]!
  interfaceField: Node
  interfaceNonNullField: Node!
  relayConnectionField: TestRelayConnection
  relayConnectionNonNullField: TestRelayConnection!
  scalarField: String
  scalarNonNullField: String!
  unionField: [TestUnion]
  unionNonNullField: [TestUnion]!
  unionNestedNonNullField: [TestUnion!]!
}

type TestNode implements Node {
  id: ID!
}

type TestOption {
  id: ID!
  name: String!
}

type TestRelayConnection implements RelayConnection {
  edges: [TestRelayEdge]
  pageInfo: PageInfo!
}

type TestNonNullEdgesRelayConnection implements RelayConnection {
  edges: [TestRelayEdge!]!
  pageInfo: PageInfo!
}

type TestNonNullNodesRelayConnection implements RelayConnection {
  edges: [TestNonNullNodesRelayEdge]
  pageInfo: PageInfo!
}

type TestRelayEdge implements RelayEdge {
  cursor: String!
  node: TestRelayNode
}

type TestNonNullNodesRelayEdge implements RelayEdge {
  cursor: String!
  node: TestRelayNode!
}

type TestRelayNode implements Node {
  id: ID!
  name: String!
}

type TestUnionOne {
  id: ID!
  oneName: String
}

type TestUnionTwo {
  id: ID!
  twoName: String
}

union TestUnion = TestUnionOne | TestUnionTwo
