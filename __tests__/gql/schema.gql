scalar Date

# TODO: What do we need for integration tests?
#   - Root level
#     - 1 scalar value that we'll resolve from the root object
#     - 1 scalar value that we'll get via optional resolver
#     - 1 interface type
#     - 1 non-null interface type
#     - 1 non-null list of non-null types
#     - 1 object type
#     - 1 non-null object type
#     - 1 Relay connection
#     - 1 list of union types
#     - 1 non-null list of non-null union types
#   - Nested level
#     - scalars
#     - belongsTo
#     - belongsTo interface type
#     - belongsTo non-null
#     - hasMany
#     - hasMany non-null
#     - hasMany union types 
#     - Relay connection

type Address {
  id: ID!
  line1: String!
  line2: String
  city: String!
  state: String!
  zip: String!
}

type Customer implements Node {
  id: ID!
  name: String!
  orders(after: String, before: String, first: Int, last: Int): OrderConnection
}

type LineItem {
  name: String!
  quantity: Int!
}

type LineItemConnection {
  edges: [LineItemEdge!]!
  pageInfo: PageInfo!
}

type LineItemEdge {
  cursor: String!
  node: LineItem
}

type Mutation {
  updatePerson(id: ID!, personAttributes: PersonAttributes!): Person!

  createPerson(personAttributes: PersonAttributes!): Person
}

interface Node {
  id: ID!
}

type Order implements Node {
  id: ID!
  lineItems(after: String, before: String, first: Int, last: Int): LineItemConnection
  number: Int!
  total: Float
}

type OrderEdge {
  cursor: String!
  node: Order
}

type OrderConnection {
  edges: [OrderEdge]
  pageInfo: PageInfo!
}

type PageInfo {
  endCursor: String
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
}

type Pet {
  id: ID!
  age: Int!
  name: String!
  type: String!
  weight: Float!
}

type Person {
  id: ID!
  address: Address!
  age: Int!
  firstName: String!
  lastName: String!
  pets(name: String): [Pet]
  createdAt: Date!
}

input PersonAttributes {
  addressId: ID
  firstName: String
  lastName: String
  age: Int
}

union PetOrPerson = Pet | Person

type Query {
  node(id: ID!): Node

  numPeople: Int

  person(id: ID!): Person

  people(firstName: String, lastName: String): [Person!]

  nonNullListOfPeople: [Person!]!

  petsAndPeople: [PetOrPerson!]!
}
